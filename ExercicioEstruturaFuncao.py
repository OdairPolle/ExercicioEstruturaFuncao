# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BZmwfNaEBzWVya8rgmmD_8ixaUkxdSHo

1. cria uma funcao def taboada():
"""

def taboada(n):
  print(f'Taboada do {n}')
  print('-'*12)
  for m in range(0, 11):
    print(f'{n:2.0f} x {m:2.0f} = {n * m:2.0f}')

taboada(5)

"""2. implemente uma funcao  que recebe um valor n inteiro e imprima ate a n-nesima linha da seguinte forma.
1
22
333
4444
nnnnn

"""

def nesima(n):
  for numero in range(n + 1):
    espaco = ' '
    print(f'{(str(numero) + espaco)* numero} ')

nesima(5)

"""3. Implemente uma funcao que receba um valor n e imprima a n-esima linha da seguinte forma"""

def nesima(n):
  for n1 in range(n):
    print()
    for n2 in range(n1 + 1):
      print(f'{(str(n2 + 1))}', end=' ')

nesima(5)

"""4. Implemente uma funcao que receba um valor em segundos e imprima o correnpondente em horas, minutos e segundos. Por exemplo, se a funcao receber como argumento 4814 imprimira 1 hora(s) 20 minutos(s) e 14 segundo(s)."""

def conversor(segundos):
  segundos = str(segundos)
  s = 0
  m = 0
  h = 0
  if int(segundos[-2:]) > 59:
    s = int(segundos[-2:]) - 60
  else:
    s = int(segundos[-2:])
  minutos = int(int(segundos) / 60)
  if (int(minutos)) > 59:
    m = minutos - 60
  else:
    m = minutos
  h = int(minutos / 60 )
  print(f'Horas: {h}, Minutos: {m}, Segundos: {s}')


conversor(4814)

"""5. Implemente uma funcao que retorne True se o argumento de entrada for numero natural primo e False caso contrario.

"""

def n_primo(numero):
  divi = 0
  for n in range(2, 1000000):
    resultado = numero / n
    resultado = str(resultado)
    if resultado[-1] == '0':
      divi += 1
  if divi > 1:
    return False
  else:
    return True


n_primo(29)

"""6. Implemente uma funcao a quantidade de digitos de um determinado numero natural passado como argumento."""

def quant_digitos(numero):
  quantidade = len(str(numero))
  return quantidade


quant_digitos(6556)

"""7. Implemente a funcao todos_iguais(sequencia) que retorna True se todos os elementos da sequencia forem iguais , caso o contrario retorna False.

"""

def todos_iguais(sequencia):
  caracteres = set(sequencia)
  if len(caracteres) == 1:
    return True
  else:
    return False


todos_iguais(input('Digite a sequencia: '))

"""8. Implemente a funcao todos_diferentes(sequencia) que retorna True se todos os elementos de sequencia forem diferente entre si, e retorna False caso contrario, isto e pelo menos un elemento igual a outro componente da sequencia."""

def todos_diferentes(sequencia):
  digitos = len(sequencia)
  caracteres = len(set(sequencia))
  if digitos == caracteres:
    return True
  else:
    return False


todos_diferentes(input('Digite a sequencia: '))

"""9. Implemente uma funcao que recebe como argumento um numero n e uma lista de numeros, indice_elemento(n, lista). a funcao retornara o indice da primeira ocorencia do numero da lista e -1 se o numero na estiver na lista."""

def indice_elemento(n, lista):
  indice = -1
  dicionario = {}
  for numero in range(len(lista)):
    dicionario[numero]= lista[numero]
  for k, v in dicionario.items():
    if v == n:
      indice = k
      break
  return indice



lista = [1, 2, 55, 4, 36, 21, 47]
n = int(input('Digite um numero inteiro: '))
indice_elemento(n, lista)

"""10. Implemente uma funcao que recebe um numero n e retorna a menor potencia de 2 maior ou igual a n. Por exemplo, pot2(14) retornara 16, pot2(42) retornara 64."""

def pot2(n):
  potencia = 1
  while potencia < n:
    potencia *= 2
  return potencia

pot2(42)

"""11. Implemente um funcao que que dado um numero natural maior que 1, decomponha esse numero em fatores primos. Por exemplo, se o argumento de entrada for 36, a saida devera ser [2,2,3,3], porque 2 x 2 x 3 x 3 = 36.

"""

def decompor_primos(n):
  lista_primos = []
  for numero in range(2, 1000000):
    resultado = n / numero
    resultado = str(resultado)
    if resultado[-1] == '0':
      lista_primos.append(numero)